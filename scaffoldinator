#! /usr/bin/env ruby

# Add lib/ folder into LOAD PATH
$:.unshift File.dirname(__FILE__) + "/lib"

require "thor"
require 'net/ssh'
require "yaml"
require "builders"

################
#
# run_cmd
# Runs shell commands

def run_cmd(cmd)
  output = `#{cmd} 2>&1`
  err("#{cmd} failed to run -- #{output}") unless $?.exitstatus == 0

  output.strip
end

def err(output)
  error "Error: #{output}"
  exit 1
end

SSHKEY = "keys/setup.pem"

class Scaffoldinator < Thor
  desc "setup", "Setup the remote host with ssh keys"
  option :hosts, :required => true, :aliases => "-H", :type => :string,  :desc => "comma-delimited list of hosts"
  def setup
    # Create keys directory
    Dir.mkdir "keys" unless Dir.exists? "keys"

    # Test if ssh key exists already or not
    unless File.exists? SSHKEY
      puts "* Generating SSH keypair"
      sshkeygen = run_cmd "type -p ssh-keygen"
      run_cmd "#{sshkeygen} -t rsa -f #{SSHKEY} -N '' -q"
    end

    options[:hosts].split(',').each do |h|
      host, port = h.split(':')
      port ||= 22

      puts "* Copy public key on host #{host}, port #{port}"
      run_cmd "cat #{SSHKEY}.pub | ssh -p #{port} #{host} \"cat >> ~/authorized_keys && mkdir -p ~/.ssh /tmp/scaffoldinator && mv ~/authorized_keys ~/.ssh/\""
    end
  end


  desc "deploy", "Deploy the code on the remote server"
  option :hosts, :required => true, :aliases => "-H", :type => :string,  :desc => "comma-delimited list of hosts"
  option :source, :required => true, :aliases => "-s", :type => :string, :desc => "folder that contains the app"
  option :dest, :required => true, :aliases => "-d", :type => :string, :desc => "folder in which to install the app on the remote host"
  def deploy
    err("Folder #{options[:source]} does not exist or is not a directory.") unless Dir.exists? options[:source]

    options[:hosts].split(',').each do |h|
      host, port = h.split(':')
      port ||= 22

      puts "* Deploy #{options[:source]} on #{h} in #{options[:dest]}"
      run_cmd "ssh -i #{SSHKEY} -p #{port} #{host} 'rm -rf #{options[:dest]} && mkdir -p #{options[:dest]}'"
      run_cmd "scp -r -i #{SSHKEY} -P #{port} #{options[:source]}/* #{host}:#{options[:dest]}/"
    end

  end


  desc "planner", "Build the script that runs on the local/remote server"
  option :hosts, :required => true, :aliases => "-H", :type => :string,  :desc => "comma-delimited list of hosts"
  option :taskfile, :required => true, :aliases => "-t", :type => :string, :desc => "specify a tasks file"
  #option :"dry-run", :aliases => "-d", :type => :boolean, :desc => "See what the tasks is going to do"
  def planner
    # Test if task file passed exists
    err("File #{options[:taskfile]} does not exist.") unless File.exists? options[:taskfile]

    tasks = YAML.load_file options[:taskfile]

    # Files to copy over
    copy_files = []

    # Service to restart
    manage_services = []

    # Create tmp directory where scripts will be created
    Dir.mkdir "tmp" unless Dir.exists? "tmp"

    # Create tmp file for the script
    mktemp  = run_cmd "type -p mktemp"
    tmpfile = run_cmd "#{mktemp} tmp/build.XXXX"

    puts "-- Tasks that will be executed on server"
    tasks.each do |task|
      puts "* #{task['desc']}"

      task.each do |k,v|
        case k
        when "packages"
          v.each do |pkg|
            open(tmpfile, 'a') { |f| f.puts Builders::Package.build(pkg) }

            ## check if dependent service needs restart or not
            ## if yes, then add to list of services to get restarted
            manage_services << pkg["service"] if pkg["service"] && !(manage_services.include? pkg["service"])
          end

        when "files"
          v.each do |file|
            copy_files << Builders::File.build(file)

            ## check if dependent service needs restart or not
            ## if yes, then add to list of services to get restarted
            manage_services << file["service"] if file["service"] && !(manage_services.include? file["service"])
          end

        when "services"
          v.each do |service|
            open(tmpfile, 'a') do |f|
              f.puts Builders::Service.build(service, (manage_services.include? service["name"]))
            end
          end

        when "desc"
          next
        else
          err "#{k} is not supported."
        end
      end
    end

    puts "-- Run tasks on remote hosts"

    options[:hosts].split(',').each do |h|
      host, port = h.split(':')
      port ||= 22

      puts "* Copy all file resources"
      copy_files.each do |f|
        run_cmd "ssh -i #{SSHKEY} -p #{port} #{host} \"mkdir -p #{f["dest"].split('/')[0..-2].join('/')}; echo -e '#{f["content"]}' > #{f["dest"]}\""
      end

      puts "* Copy build script over to #{host}"
      run_cmd "scp -i #{SSHKEY} -P #{port} #{tmpfile} #{host}:/tmp/scaffoldinator"

      puts "* Run script on server"
      run_cmd "ssh -i #{SSHKEY} -p #{port} #{host} bash /tmp/scaffoldinator/#{tmpfile.split('/').last}"
    end

    # Delete tmp file
    File.delete tmpfile if File.exists? tmpfile

    puts "-- Finished successfully."
  end
end

Scaffoldinator.start
